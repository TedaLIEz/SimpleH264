//
// Created by aLIEzTed on 5/15/18.
//

#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "sps.h"

class SpsTest : public ::testing::Test {
 protected:
  // Some expensive resource shared by all tests.
  static SpsParser *spsParser;
  unsigned char mock_data[114] =
      {0x64, 0x00, 0x28, 0xAD, /* 0b 1 010 1 1 0 1 */0x84, 0x05, 0x45, 0x62, 0xB8, 0xAC, 0x54, 0x74, 0x20, 0x2A,
       0x2B, 0x15, 0xC5, 0x62, 0xA3, 0xA1, 0x01, 0x51, 0x58, 0xAE, 0x2B, 0x15, 0x1D, 0x08,
       0x0A, 0x8A, 0xC5, 0x71, 0x58, 0xA8, 0xE8, 0x40, 0x54, 0x56, 0x2B, 0x8A, 0xC5, 0x47,
       0x42, 0x02, 0xA2, 0xB1, 0x5C, 0x56, 0x2A, 0x3A, 0x10, 0x24, 0x85, 0x21, 0x39, 0x3C,
       0x9F, 0x27, 0xE4, 0xFE, 0x4F, 0xC9, 0xF2, 0x79, 0xB9, 0xB3, 0x4D, 0x08, 0x12, 0x42,
       0x90, 0x9C, 0x9E, 0x4F, 0x93, 0xF2, 0x7F, 0x27, 0xE4, 0xF9, 0x3C, 0xDC, 0xD9, 0xA6,
       0xB4, 0x05, 0x01, 0xED, 0x80, 0xAA, 0x40, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00,
       0x25, 0x98, 0x10, 0x00, 0xFA, 0x00, 0x00, 0x46, 0x51, 0xBD, 0xEF, 0x85, 0xE1, 0x10,
       0x8D, 0x40};
//  unsigned char mock_data[28] = {0x64,
//                                 0x00,
//                                 0x29,
//                                 0xac,   // 0b 1 010 1 1 0 0
//                                 0xc8,   // 0b 11001000
//                                 0x50,
//                                 0x1e,
//                                 0x00,
//                                 0x89,
//                                 0xf9,
//                                 0x70,
//                                 0x16,
//                                 0xa0,
//                                 0x20,
//                                 0x20,
//                                 0x28,
//                                 0x00,
//                                 0x00,
//                                 0x1f,
//                                 0x48,
//                                 0x00,
//                                 0x05,
//                                 0xdc,
//                                 0x04,
//                                 0x78,
//                                 0xc1,
//                                 0x8c,
//                                 0xb0,};
  // Per-test-case set-up.
  // Called before the first test in this test case.
  // Can be omitted if not needed.
  static void SetUpTestCase() {
    spsParser = new SpsParser();
  }

  // Per-test-case tear-down.
  // Called after the last test in this test case.
  // Can be omitted if not needed.
  static void TearDownTestCase() {
    delete spsParser;
    spsParser = nullptr;
  }

  // You can define per-test set-up and tear-down logic as usual.
  virtual void SetUp() {
    spsParser->parse(mock_data, 114);
  }
  virtual void TearDown() {

  }

};

SpsParser *SpsTest::spsParser = nullptr;

TEST_F(SpsTest, SPS_Profile_idc) {
  EXPECT_EQ(spsParser->getProfile_idc(), 0x64);
}

TEST_F(SpsTest, SPS_Level_idc) {
  EXPECT_EQ(spsParser->getLevel_idc(), 0x28);
}

TEST_F(SpsTest, SPS_Seq_param_set_id) {
  EXPECT_EQ(spsParser->getSeq_param_set_id(), 0);
}

TEST_F(SpsTest, SPS_Chroma_format_idc) {
  EXPECT_EQ(spsParser->getChroma_format_idc(), 1);
}


// private test starts
TEST_F(SpsTest, SPS_Separate_colour_plane_flag) {
  EXPECT_EQ(spsParser->separate_colour_plane_flag, -1);
}

TEST_F(SpsTest, SPS_Depth_luma) {
  EXPECT_EQ(spsParser->bit_depth_luma_minus8, 0);
}

TEST_F(SpsTest, SPS_Depth_chroma) {
  EXPECT_EQ(spsParser->bit_depth_chroma_minus8, 0);
}

TEST_F(SpsTest, SPS_Qpprime_y_zero_transform_bypass_flag) {
  EXPECT_EQ(spsParser->qpprime_y_zero_transform_bypass_flag, false);
}

TEST_F(SpsTest, SPS_Seq_scaling_matrix_present_flag) {
  EXPECT_EQ(spsParser->seq_scaling_matrix_present_flag, true);
}

TEST_F(SpsTest, SPS_Scaling_list_size_Test) {
  EXPECT_EQ(spsParser->seq_scaling_list_present_flag.size(), 8);
}

TEST(SpsScalingListTest, SPS_Scaling_list) {
  auto *spsParser = new SpsParser();
  auto *scaling_list = new int[16]();
  auto *use_default_scaling_matrix_flag = new bool[16]();
  unsigned char data[] = {
      0x64, 0x00, 0x28, 0xAD, /* 0b 1 010 1 1 0 1 */ 0x84  /* 0b 1000 0100 */, 0x05, /* 0b0000 0101*/0x45, 0x62, 0xb8, /* 0b 1011 1000 */0xAC, 0x54, 0x74, 0x20, 0x2A,
      0x2B, 0x15, 0xC5, 0x62, 0xA3, 0xA1, 0x01, 0x51, 0x58, 0xAE, 0x2B, 0x15, 0x1D, 0x08,
      0x0A, 0x8A, 0xC5, 0x71, 0x58, 0xA8, 0xE8, 0x40, 0x54, 0x56, 0x2B, 0x8A, 0xC5, 0x47,
      0x42, 0x02, 0xA2, 0xB1, 0x5C, 0x56, 0x2A, 0x3A, 0x10, 0x24, 0x85, 0x21, 0x39, 0x3C,
      0x9F, 0x27, 0xE4, 0xFE, 0x4F, 0xC9, 0xF2, 0x79, 0xB9, 0xB3, 0x4D, 0x08, 0x12, 0x42,
      0x90, 0x9C, 0x9E, 0x4F, 0x93, 0xF2, 0x7F, 0x27, 0xE4, 0xF9, 0x3C, 0xDC, 0xD9, 0xA6,
      0xB4, 0x05, 0x01, 0xED, 0x80, 0xAA, 0x40, 0x00, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00,
      0x25, 0x98, 0x10, 0x00, 0xFA, 0x00, 0x00, 0x46, 0x51, 0xBD, 0xEF, 0x85, 0xE1, 0x10,
      0x8D, 0x40
  };
  unsigned long offset = 33;
  spsParser->scaling_list(data, offset, scaling_list[0], 16, use_default_scaling_matrix_flag[0]);

}

// private test ends





